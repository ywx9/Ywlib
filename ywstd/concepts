/// \file concepts
/// \copyright (c) 2022 ywx9.com

#pragma once

#include <new>
#include <type_traits>

#ifndef ywstd_import
ywstd_export namespace std {

template<typename... Ts> concept _valid = requires { typename void_t<Ts...>; };
template<typename T> constexpr bool _always_false = false;
template<typename T> constexpr T afterthought() noexcept {
  static_assert(_always_false<T>, "afterthought");
  return T{};
}

template<typename T, typename U> concept _half_same_as = is_same_v<T, U>;
template<typename T, typename U> concept same_as = _half_same_as<T, U> && _half_same_as<U, T>;
template<typename T, typename U> concept derived_from = is_base_of_v<U, T> && !is_same_v<T, U>;
// template<typename T, typename U> concept convertible_to =
//   is_convertible_v<T, U> && requires { static_cast<U>(declval<T>()); };
template<typename T, typename U> concept common_reference_with =
  same_as<common_reference_t<T, U>, common_reference_t<U, T>> &&
  convertible_to<T, common_reference_t<T, U>> &&
  convertible_to<U, common_reference_t<T, U>>;
template<typename T, typename U> concept common_with =
  same_as<common_type_t<T, U>, common_type_t<U, T>> &&
  requires { static_cast<common_type_t<T, U>>(declval<T>());
             static_cast<common_type_t<T, U>>(declval<U>()); } &&
  common_reference_with<add_lvalue_reference_t<const T>, add_lvalue_reference_t<const U>> &&
  common_reference_with<
    add_lvalue_reference_t<common_type_t<T, U>>,
    common_reference_t<add_lvalue_reference_t<const T>, add_lvalue_reference_t<const U>>>;
template<typename T> concept integral = is_integral_v<T>;
template<typename T> concept signed_integral = integral<T> && is_signed_v<T>;
template<typename T> concept unsigned_integral = integral<T> && !signed_integral<T>;
template<typename T> concept floating_point = is_floating_point_v<T>;
template<typename T> concept _arithmetic = integral<T> || floating_point<T>;
template<typename T> concept destructible = is_nothrow_destructible_v<T>;
template<typename T, typename... As> concept constructible_from = destructible<T> && is_constructible_v<T, As...>;
template<typename T> concept default_initializable =
  constructible_from<T> && requires { T{}; ::new (static_cast<void*>(nullptr)) T; };
template<typename T> concept move_constructible = constructible_from<T, T> && convertible_to<T, T>;
template<typename T> concept copy_constructible =
  move_constructible<T> && constructible_from<T, T&> && convertible_to<T&, T> &&
  constructible_from<T, const T&> && convertible_to<const T&, T> &&
  constructible_from<T, const T> && convertible_to<const T, T>;
template<typename T, typename A> concept assignable_from =
  is_lvalue_reference_v<T> && requires(T t) { { t = declval<A>() } -> same_as<T>; } &&
  common_reference_with<const remove_reference_t<T>&, const remove_reference_t<A>&>;

namespace _ranges_swap {
template<typename T> void swap(T&, T&) = delete;
template<typename T> concept enum_class_union = is_enum_v<T> || is_class_v<T> || is_union_v<T>;
template<typename T, typename U> concept adl =
  (enum_class_union<remove_reference_t<T>> || enum_class_union<remove_reference_t<U>>) &&
  requires { swap(declval<T>(), declval<U>()); };
template<typename T> concept fallback = !adl<T&, T&> && move_constructible<T> && assignable_from<T&, T>;
struct fn {
  template<typename T, typename U> requires adl<T, U>
  _STATIC_CALL_OPERATOR constexpr void operator()(T&& t, U&& u) _CONST_CALL_OPERATOR
    noexcept(noexcept(swap(declval<T>(), declval<U>()))) {
    swap(static_cast<T&&>(t), static_cast<U&&>(u));
  }
  template<typename T> requires fallback<T>
  _STATIC_CALL_OPERATOR constexpr void operator()(T& x, T& y) _CONST_CALL_OPERATOR
    noexcept(is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>) {
    T t = static_cast<T&&>(x); x = static_cast<T&&>(y); y = static_cast<T&&>(t);
  }
  template<typename T, typename U, size_t N>
  _STATIC_CALL_OPERATOR constexpr void operator()(T(&x)[N], U(&y)[N]) _CONST_CALL_OPERATOR
    noexcept(noexcept(operator()(x[0], y[0]))) requires requires { operator()(x[0], y[0]); } {
    if constexpr (same_as<T, U> && _Is_trivially_swappable_v<T>)
      if (!is_constant_evaluated()) {
        std::_Swap_trivial_arrays(x, y);
        return;
      }
    for (size_t i = 0; i < N; ++i) operator()(x[i], y[i]);
  }
};
}
namespace ranges::inline _cpos {
inline constexpr _ranges_swap::fn swap;
}
template<typename T> concept swappable = requires(T& x, T& y) { ranges::swap(x, y); };
template<typename T, typename U> concept swappable_with =
  common_reference_with<T, U> &&
  requires { ranges::swap(declval<T>(), declval<T>()); ranges::swap(declval<T>(), declval<U>());
             ranges::swap(declval<U>(), declval<T>()); ranges::swap(declval<U>(), declval<U>()); };

template<typename T> concept _boolean_testable =
  convertible_to<T, bool> && requires { { !declval<T>() } -> convertible_to<bool>; };
template<typename T, typename U> concept _half_equality_comparable =
  requires(const remove_reference_t<T>& t, const remove_reference_t<U>& u) {
    { t == u } -> _boolean_testable; { t != u } -> _boolean_testable; };
template<typename T, typename U> concept _weakly_equality_comparable_with =
  _half_equality_comparable<T, U> && _half_equality_comparable<U, T>;
template<typename T> concept equality_comparable = _half_equality_comparable<T, T>;

template<typename T, typename U, typename R = common_reference_t<const T&, const U&>>
concept _comparison_common_type_with_impl =
  same_as<R, common_reference_t<const U&, const T&>> && requires {
    requires convertible_to<const T&, const R&> || convertible_to<T, const R&>;
    requires convertible_to<const U&, const R&> || convertible_to<U, const R&>; };
template<typename T, typename U> concept _comparison_common_type_with =
  _comparison_common_type_with_impl<remove_cvref_t<T>, remove_cvref_t<U>>;

template<typename T, typename U> concept equality_comparable_with =
  equality_comparable<T> && equality_comparable<U> &&
  _comparison_common_type_with<T, U> && _weakly_equality_comparable_with<T, U> &&
  equality_comparable<common_reference_t<const remove_reference_t<T>&, const remove_reference_t<U>&>>;
template<typename T, typename U> concept _half_ordered =
  requires(const remove_reference_t<T>& t, const remove_reference_t<U>& u) {
    { t < u } -> _boolean_testable; { t <= u } -> _boolean_testable;
    { t > u } -> _boolean_testable; { t >= u } -> _boolean_testable; };
template<typename T, typename U> concept _partially_ordered_with = _half_ordered<T, U> && _half_ordered<U, T>;
template<typename T> concept totally_ordered = equality_comparable<T> && _half_ordered<T, T>;
template<typename T, typename U> concept totally_ordered_with =
  totally_ordered<T> && totally_ordered<U> && equality_comparable_with<T, U> && _partially_ordered_with<T, U> &&
  totally_ordered<common_reference_t<const remove_reference_t<T>&, const remove_reference_t<U>&>>;
template<typename T> concept movable =
  is_object_v<T> && move_constructible<T> && assignable_from<T&, T> && swappable<T>;
template<typename T> concept copyable =
  copy_constructible<T> && movable<T> && assignable_from<T&, T&> &&
  assignable_from<T&, const T&> && assignable_from<T&, const T>;
template<typename T> concept semiregular = copyable<T> && default_initializable<T>;
template<typename T> concept regular = semiregular<T> && equality_comparable<T>;
template<typename F, typename... As> concept invocable = requires { std::invoke(declval<F>(), declval<As>()...); };
template<typename F, typename... As> concept regular_invocable = invocable<F, As...>;
template<typename F, typename... As> concept predicate =
  regular_invocable<F, As...> && _boolean_testable<invoke_result_t<F, As...>>;
template<typename F, typename T, typename U> concept relation =
  predicate<F, T, T> && predicate<F, U, U> && predicate<F, T, U> && predicate<F, U, T>;
template<typename F, typename T, typename U> concept equivalence_relation = relation<F, T, U>;
template<typename F, typename T, typename U> concept strict_weak_order = relation<F, T, U>;
}
#endif
